;; Craig Jenquin (A14589542)

;; Problem (1)

(defn abs [z] 
  (Math/sqrt (* z z)))

;; (map abs (list 1 -4 -22 -1999 -85 42 (* -9877 4612)))



;; Problem (2)
;; The (defn ) function requires an input specification (bracketed parameter) and should be written:

(defn take-square [x]
  (* x x))


;; The (defn ) function should define its parameters without (take-square ) function. I'm not certain if there are functions
;; that might appropriately modify a parameter definition. Functions cannot be applied in [  ]  statements.

(defn sum-of-squares [x y]
(+ (take-square x) (take-square y)))




;; Problem (3)

(def exp-13-1 (Math/sqrt 169))
exp-13-1

(def exp-13-2 13)
exp-13-2

(def exp-13-3 (+ (/ 9 3) (+ 2 (+ 2 (* 2 3)))))
exp-13-3

(def exp-13-4 (first (list 13 12 11 10)))
exp-13-4



;; Problem (4)

(defn third [z]
  (first (rest (rest z))))

;;(third '(4 5 6))



;; Problem (5)

(defn compose [f g] (fn [x] (g (f x))))



;; Problem (6)

(defn first-two [l] 
  (list (first l) (first (rest l))))

;;(first-two '(4 5 6))



;; Problem (7)
 
(defn remove-third [l] 
  (cons (first l) (cons (first (rest l)) (rest (rest (rest l))))))

;;(remove-third (list 3 1 4))



;; Problem (8)

(defn add-to-end [l x]
  (concat l (list x)))

;;(add-to-end (list 5 6 4) 0)



;; Problem (9)

(defn reverse [l] 
  
  (if (= l '())
  '()
  (concat(reverse (rest l)) (list (first l)))))

;;(reverse '(1 2 3 4))



;; Problem (10)

(defn count-to-n [n] 
  (if (= (- n 1) 0)
    (list 1)
    (concat (count-to-n (- n 1)) (list n))))

;;(count-to-n 4)



;; Problem (11)

(defn count-to-1 [n]
    (if (= 0 (- n 1))
    (list 1)
    (concat (list n) (count-to-1 (- n 1)))
    ) 
  )
;;(count-to-1 13)



;; Problem (12)
 (defn get-min [l] 
  
  (if (= '() (rest l))
    (first l)
    (if (< (get-min (rest l)) (first l))
      (get-min (rest  l))
      (first l))
    ))

;;(get-min '(7 8 9 10 11 12 6 5 4 3 2 1 ))




;; Problem (13)
(defn greater-than-five? [l] 
  (map (fn [x] (> x 5)) l))


;;(greater-than-five? (list 6 5 4 7))




;;Problem (14)
(defn concat-three [x y z] (concat x (concat y z)))

;;(concat-three (list 'a 'b) (list 'b 'c) (list 'd 'e))

